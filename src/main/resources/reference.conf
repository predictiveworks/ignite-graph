
fiware {
  actor = {
    #
    # Timeout in seconds
    #
    timeout = 5
    #
    # Parameters to control the handling of failed child actors:
    # it is the number of retries within a certain time window.
    #
    # The supervisor strategy restarts a child up to 10 restarts
    # per minute. The child actor is stopped if the restart count
    # exceeds maxRetries during the withinTimeRange duration.
    #
    maxRetries = 10
    #
    # Time range in minutes
    #
    timeRange = 1
    #
    # Child actors are defined leveraging a RoundRobin pool with a
    # dynamic resizer. The boundaries of the resizer are defined
    # below
    #
    lower = 2
    upper = 100
    #
    # The number of instances for the RoundRobin pool
    #
    instances = 50
  }
  #
  # The HTTP binding for the Fiware notification server;
  # this configuration must be adapted to the current
  # environment
  #
  binding = {
    host = "127.0.0.1"
    port = 9090
  }
  #
  # The endpoint of the Orion Context Broker; this configuration
  # must be adapted to the current environment
  #
  broker = {
    endpoint = "http://127.0.0.1:9080"
  }
  #
  # The name of the smart data model that is used to interpret
  # notifications sent from an NGSI v2 | NGSI-LD Context Broker
  #
  model = {
    name = "AgriFood"
  }
}

ignite {
  #
  # Ignite REST API default host
  #
  host = "127.0.0.1"
  #
  # Ignite REST API default port
  #
  port = 8080
  #
  # Ignite REST API default protocol
  #
  protocol = "http"
  #
  # If you plan to allocate large amounts of memory to your JVM for data
  # caching (usually more than 10GB of memory), then your application will
  # most likely suffer from prolonged lock-the-world GC pauses which can
  # significantly hurt latencies. To avoid GC pauses, use off-heap memory
  # to cache the data - essentially, your data is still cached in the memory,
  # but the JVM does not know about it and GC is not affected.
  #
  # Enables off-heap storage with unlimited size:
  offHeapMaxMemory = 0
  #
  # Ignite's internal cache map acts exactly like a normal Java HashMap:
  # it has some initial capacity (100000), which doubles as data arrives.
  #
  # The process of internal cache map resizing is CPU-intensive, and if
  # one loads a huge dataset into the cache, the map will have to resize
  # a lot of times.
  #
  # To avoid that, you can specify the initial cache map capacity, comparable
  # to the expected size of your dataset.
  startSize = 1000000
  #
  # Write Behind (vs. Write Through) is an Apache Ignite strategy to update
  # the associated backend store (Crate DB). Write Behind performs an extra
  # caching of entries to be persisted into the store.
  #
  # Write Behind operates time or size controlled. Lessons learned:
  #
  # IgniteRDD (based on a certain cache) & Write Behind result in large variety
  # of numbers of entries that are written into the store (from 1 to 10k).
  #
  # We therefore recommend to leverage Write Through as this strategy is
  # accompanied by an application controlled batch mechanism (IgniteBatchRDD)
  # that directly leverages the partitions of an Apache Spark RDD.
  writeBehind = false
  #
  # Maximum size of the write-behind cache. If cache size exceeds this value,
  # all cached items are flushed to the cache store and write cache is cleared.
  #
  # If this value is 0, then flush is performed according to the flush frequency
  # interval. Note that you cannot set both, flush size and flush frequency, to 0.
  writeBehindFlushSize = 10240
  #
  # Frequency with which write-behind cache is flushed to the store in milliseconds.
  # This value defines the maximum time interval between object insertion/deletion
  # from the cache and the moment when corresponding operation is applied to the
  # cache store. If this value is 0, then flush is performed according to the flush
  # size. Note that you cannot set both, flush size and flush frequency, to 0.
  writeBehindFlushFrequency = 5000
  #
  # Number of threads that will perform cache flushing.
  writeBehindFlushThreadCount = 1
  #
  # Maximum batch size for write-behind cache store operations.
  writeBehindBatchSize = 512
  #
  # A table is refreshed periodically with a specified refresh interval. By default,
  # the refresh interval is set to 1000 milliseconds. The refresh interval of a table
  # can be changed with the table parameter refresh_interval
  refreshInterval = 1000
  #
  # This is default prefix of the Apache Ignite file system
  #
  fsDefaultName = "igfs://igfs@/"
}

#
# The security configuration for SSL/TLS. Support is a key and
# trust store based approach as well as the usage of certificates
#
security {
  #
  # SSL/TLS support for send subscription requests
  # to the Orion Context Broker
  #
  fiware = {
    #
    # The default configuration for subscription
    # requests does not support SSL/TLS. Set this
    # value to "true" to enable encryption
    #
    ssl = "false"
    #
    # The path to the keystore file
    #
    ksFile = ""
    #
    # The keystore type
    #
    ksType = ""
    #
    # The keystore password
    #
    ksPass = ""
    #
    # The keystore algorithm
    #
    ksAlgo = ""
    #
    # The path to the truststore file
    #
    tsFile = ""
    #
    # The truststore type
    #
    tsType = ""
    #
    # The truststore password
    #
    tsPass = ""
    #
    # The truststore algorithm
    #
    tsAlgo = ""
    #
    # The path to the certificate file of the
    # Certificate authority
    #
    caCertFile = ""
    #
    # The path to the certificate file
    #
    certFile = ""
    #
    # The path to the private key file
    #
    privateKeyFile = ""
    #
    # The password for the private key file
    #
    privateKeyFilePass = ""

  }

  server = {
    #
    # The default configuration for notification
    # requests does not support SSL/TLS. Set this
    # value to "true" to enable encryption
    #
    ssl = "false"
    #
    # The path to the keystore file
    #
    ksFile = ""
    #
    # The keystore type
    #
    ksType = ""
    #
    # The keystore password
    #
    ksPass = ""
    #
    # The keystore algorithm
    #
    ksAlgo = ""
    #
    # The path to the truststore file
    #
    tsFile = ""
    #
    # The truststore type
    #
    tsType = ""
    #
    # The truststore password
    #
    tsPass = ""
    #
    # The truststore algorithm
    #
    tsAlgo = ""
    #
    # The path to the certificate file of the
    # Certificate authority
    #
    caCertFile = ""
    #
    # The path to the certificate file
    #
    certFile = ""
    #
    # The path to the private key file
    #
    privateKeyFile = ""
    #
    # The password for the private key file
    #
    privateKeyFilePass = ""

  }

}